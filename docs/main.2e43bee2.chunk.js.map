{"version":3,"sources":["consts.ts","components/DropDown.tsx","components/Grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Candies","_id","name","price","DropDown","selected","onChange","className","e","target","value","map","c","key","defaultValue","GridRow","props","candy","count","sum","calcSum","Number","toFixed","cand","find","type","priceChange","countChange","Grid","useState","candies","setCandies","totalSum","setTotalSum","uuid","forEach","index","console","warn","changeCandy","onClick","push","Date","now","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"main.2e43bee2.chunk.js","sourcesContent":["import {ICandy} from \"./types\";\r\n\r\nexport const Candies : ICandy[] =[\r\n    {\r\n        _id: \"1\",\r\n        name: 'Кейкпопси',\r\n        price: 18\r\n    },\r\n    {\r\n        _id: \"2\",\r\n        name: 'Мусове тістечко (фруктове)',\r\n        price: 27\r\n    },\r\n    {\r\n        _id: \"3\",\r\n        name: 'Мусове тістечко (чорнослив)',\r\n        price: 27\r\n    },\r\n    {\r\n        _id: \"4\",\r\n        name: 'Капкейки',\r\n        price: 30\r\n    },\r\n    {\r\n        _id: \"5\",\r\n        name: 'Тірамісу ',\r\n        price: 24\r\n    },\r\n    {\r\n        _id: \"6\",\r\n        name: 'Тарта фруктова',\r\n        price: 26\r\n    },\r\n    {\r\n        _id: \"7\",\r\n        name: 'Тарта з шоколадним ганашем',\r\n        price: 26\r\n    },\r\n    {\r\n        _id: \"8\",\r\n        name: 'Паннакотта',\r\n        price: 22\r\n    },\r\n    {\r\n        _id: \"9\",\r\n        name: 'Макаронси',\r\n        price: 18\r\n    },\r\n    {\r\n        _id: \"10\",\r\n        name: 'Макаронси преміум',\r\n        price: 28\r\n    },\r\n    {\r\n        _id: \"11\",\r\n        name: 'Вершковий десерт',\r\n        price: 22\r\n    },\r\n    {\r\n        _id: \"12\",\r\n        name: 'Міні-чізкейк (min)',\r\n        price: 24\r\n    },\r\n    {\r\n        _id: \"13\",\r\n        name: 'Міні-чізкейк (max)',\r\n        price: 30\r\n    },\r\n    {\r\n        _id: \"14\",\r\n        name: 'Листкове тістечко (лимонне)',\r\n        price: 22\r\n    },\r\n    {\r\n        _id: \"15\",\r\n        name: 'Листкове тістечко (лайм)',\r\n        price: 22\r\n    },\r\n    {\r\n        _id: \"16\",\r\n        name: 'Десерт Орео',\r\n        price: 26\r\n    },\r\n    {\r\n        _id: \"17\",\r\n        name: 'Мусове серце (min)',\r\n        price: 26\r\n    },\r\n    {\r\n        _id: \"18\",\r\n        name: 'Мусове серце (max)',\r\n        price: 37\r\n    },\r\n    {\r\n        _id: \"19\",\r\n        name: 'Лимонний мус',\r\n        price: 24\r\n    },\r\n    {\r\n        _id: \"20\",\r\n        name: 'Лаймовий мус',\r\n        price: 24\r\n    },\r\n    {\r\n        _id: \"21\",\r\n        name: 'Шоколадний мус',\r\n        price: 24\r\n    },\r\n    {\r\n        _id: \"22\",\r\n        name: 'Шоколадний мус',\r\n        price: 23\r\n    },\r\n    {\r\n        _id: \"23\",\r\n        name: 'Павлова',\r\n        price: 25\r\n    },\r\n\r\n];","import {ICandy} from '../types';\r\nimport {Candies} from '../consts';\r\nimport React from 'react';\r\nimport './dropdown.scss'\r\nconst DropDown = ({ selected, onChange}: { selected: string, onChange: any}) => {\r\n    return (\r\n       <select className=\"drop-down\" onChange={(e)=> onChange(e.target.value)}>\r\n           {Candies.map((c: ICandy) =>{\r\n              if (c._id === selected) {\r\n                  return  <option key={c._id} value={c._id} defaultValue={selected}>{c.name}</option>\r\n              } else {\r\n                  return <option key={c._id} value={c._id}>{c.name}</option>\r\n              }\r\n           })};\r\n       </select>\r\n    );\r\n};\r\n\r\nexport default DropDown;","import React, {useState} from 'react';\r\nimport DropDown from './DropDown';\r\nimport {ICandyItem} from \"../types\";\r\nimport {Candies} from \"../consts\";\r\nimport './grid.scss';\r\n\r\nconst Grid = () => {\r\n    let cand: ICandyItem[] = [];\r\n    let [candies, setCandies] = useState(cand);\r\n    let [totalSum, setTotalSum] = useState(0);\r\n\r\n    let AddRow = () => {\r\n        cand = candies;\r\n        debugger;\r\n        cand.push({\r\n            ...Candies[0],\r\n            count: 0,\r\n            sum: 0,\r\n            uuid:  Date.now()\r\n        });\r\n        setCandies([...cand]);\r\n    };\r\n\r\n    let changeCandy = (candy: ICandyItem) => {\r\n        cand = candies;\r\n        let totalSum =0;\r\n\r\n        cand.forEach((c, index) => {\r\n            if (c.uuid === candy.uuid) {\r\n                cand[index] = {\r\n                    ...candy\r\n                };\r\n            }\r\n            totalSum += cand[index].sum;\r\n        });\r\n        console.warn(totalSum)\r\n        setTotalSum(totalSum);\r\n        setCandies([...cand]);\r\n    };\r\n    return (\r\n        <div className=\"grid\">\r\n            <div className=\"grid-body\" >\r\n                <div className=\"grid-row header\">\r\n                    <div className=\"product\">Продукт</div>\r\n                    <div className=\"price\">Ціна</div>\r\n                    <div className=\"count\">К-сть</div>\r\n                    <div className=\"sum\">Сума</div>\r\n                </div>\r\n                {\r\n                    candies.map((c) => {\r\n                        return <GridRow key={c.uuid} candy={c} onChange={(c: ICandyItem) => changeCandy(c)}/>\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"total-row\">\r\n                Загальна вартість: {totalSum} грн\r\n            </div>\r\n\r\n            <div className=\"action-bar\">\r\n                <button className=\"add-row-button\" onClick={() => AddRow()}>+</button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nconst GridRow = (props: any) => {\r\n    let candy: ICandyItem = props.candy;\r\n\r\n    let {_id, price, count, sum} = candy;\r\n\r\n    let onCandyChanged = (_id: string) => {\r\n        let cand = Candies.find(candy => candy._id === _id);\r\n        if (cand){\r\n            candy = {\r\n                ...candy,\r\n                _id: cand._id,\r\n                price: cand.price,\r\n                name: cand.name\r\n            }\r\n        }\r\n        if (candy) {\r\n            _id = candy._id;\r\n            price = candy.price;\r\n            calcSum();\r\n        };\r\n    };\r\n\r\n    let calcSum = () => {\r\n        sum = (Number((count * price).toFixed(2)));\r\n        props.onChange({\r\n            ...candy,\r\n            count,\r\n            sum,\r\n            price\r\n        });\r\n    };\r\n\r\n    let countChange = (e: any) => {\r\n        count = (Number(e.target.value));\r\n        calcSum();\r\n    };\r\n\r\n    let priceChange = (e: any) => {\r\n        price = (Number(e.target.value));\r\n        calcSum();\r\n    };\r\n\r\n    return (\r\n        <div className=\"grid-row\">\r\n            <div className=\"product\">\r\n                <DropDown selected={_id} onChange={onCandyChanged}/>\r\n            </div>\r\n            <div className=\"price\">\r\n                <input type=\"number\" value={price} onChange={(e) => priceChange(e)}/>\r\n            </div>\r\n            <div className=\"count\">\r\n                <input type=\"number\" value={count} onChange={(e) => countChange(e)}/>\r\n            </div>\r\n            <div className=\"sum\">\r\n                {sum} грн\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Grid;","import React from 'react';\nimport './App.scss';\nimport Grid from \"./components/Grid\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <Grid/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}